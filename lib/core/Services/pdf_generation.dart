import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:ksuplanners/core/Services/db_controllers.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';

import '../Database/task_schema.dart';

class pdf {
  SaadDBCoreCalls db;
  pdf({required this.db});

  Future<void> GenerateReport() async {
    final pdf = pw.Document();
    final font = await rootBundle.load("assets/OpenSans-Medium.ttf");
    final bold_font = await rootBundle.load("assets/OpenSans-ExtraBold.ttf");

    final ttfBold = pw.Font.ttf(bold_font);
    final ttf = pw.Font.ttf(font);
    final allTasks = await db.getAllTasks();
    final allResources = await db.getAllResources();

    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        build: (pw.Context context) => pw.Center(
            child: pw.Wrap(direction: pw.Axis.vertical, children: [
          pw.Text('Project Report',
              style: pw.TextStyle(font: ttfBold, fontSize: 48)),
          pw.Text('@Generated By Ksuplanners App',
              style: pw.TextStyle(font: ttf, fontSize: 18)),
        ])),
      ),
    );
    pdf.addPage(pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        build: ((pw.Context context) {
          return [
            pw.Text("Tasks List:",
                style: pw.TextStyle(
                    font: ttfBold, fontWeight: pw.FontWeight.bold)),
            pw.Table(border: pw.TableBorder.all(), children: [
              pw.TableRow(children: [
                pw.Column(children: [
                  pw.Text("Task ID", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("Name", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("Duration(Day/s)", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("Start(date)", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("End(date)", style: pw.TextStyle(font: ttf))
                ])
              ]),
              for (int i = 0; i < allTasks.length; i++) ...[
                pw.TableRow(children: [
                  pw.Column(children: [
                    pw.Text((i + 1).toString(), style: pw.TextStyle(font: ttf))
                  ]),
                  pw.Column(children: [
                    pw.Text(allTasks[i].label.toString(),
                        style: pw.TextStyle(font: ttf))
                  ]),
                  pw.Column(children: [
                    pw.Text(
                        calcDuration(
                                DateTime.utc(
                                    allTasks[i].S_Date_year!,
                                    allTasks[i].S_Date_month!,
                                    allTasks[i].S_Date_day!),
                                DateTime.utc(
                                    allTasks[i].F_Date_year!,
                                    allTasks[i].F_Date_month!,
                                    allTasks[i].F_Date_day!))
                            .toString(),
                        style: pw.TextStyle(font: ttf))
                  ]),
                  pw.Column(children: [
                    pw.Text(
                        " ${allTasks[i].S_Date_year}-${allTasks[i].S_Date_month}-${allTasks[i].S_Date_day} ",
                        style: pw.TextStyle(font: ttf))
                  ]),
                  pw.Column(children: [
                    pw.Text(
                        " ${allTasks[i].F_Date_year}-${allTasks[i].F_Date_month}-${allTasks[i].F_Date_day} ",
                        style: pw.TextStyle(font: ttf))
                  ]),
                ])
              ]
            ]),
            pw.SizedBox(height: 20),
            pw.Text("Resources List: ", style: pw.TextStyle(font: ttfBold)),
            pw.Table(border: pw.TableBorder.all(), children: [
              pw.TableRow(children: [
                pw.Column(children: [
                  pw.Text("Resource Name", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("Type", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("Material", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("Max %", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("St.Rate", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(
                    children: [pw.Text("Ovt", style: pw.TextStyle(font: ttf))]),
                pw.Column(children: [
                  pw.Text("Cost/Use", style: pw.TextStyle(font: ttf))
                ])
              ]),
              for (int i = 0; i < allResources.length; i++) ...[
                pw.TableRow(children: [
                  pw.Column(children: [
                    pw.Text(allResources[i].label.toString(),
                        style: pw.TextStyle(font: ttf))
                  ]),
                  if (allResources[i].w != null)
                    pw.Column(children: [
                      pw.Text("Work", style: pw.TextStyle(font: ttf))
                    ]),
                  if (allResources[i].c != null)
                    pw.Column(children: [
                      pw.Text("Cost", style: pw.TextStyle(font: ttf))
                    ]),
                  if (allResources[i].m != null)
                    pw.Column(children: [
                      pw.Text("Material", style: pw.TextStyle(font: ttf))
                    ]),
                  if (allResources[i].m != null) ...[
                    pw.Column(children: [
                      pw.Text(allResources[i].m!.quantity.toString(),
                          style: pw.TextStyle(font: ttf))
                    ]),
                  ] else
                    pw.Column(children: [
                      pw.Text("   ", style: pw.TextStyle(font: ttf))
                    ]),
                  if (allResources[i].w != null) ...[
                    pw.Column(children: [
                      pw.Text(
                          allResources[i].w!.percentage_avaliablity.toString(),
                          style: pw.TextStyle(font: ttf)),
                    ]),
                    pw.Column(children: [
                      pw.Text(allResources[i].w!.$_per_hr.toString(),
                          style: pw.TextStyle(font: ttf))
                    ]),
                    pw.Column(children: [
                      pw.Text(allResources[i].w!.ovt$_per_hr.toString(),
                          style: pw.TextStyle(font: ttf))
                    ]),
                  ] else ...[
                    pw.Column(children: [
                      pw.Text("   ", style: pw.TextStyle(font: ttf))
                    ]),
                    pw.Column(children: [
                      pw.Text("   ", style: pw.TextStyle(font: ttf))
                    ]),
                    pw.Column(children: [
                      pw.Text("   ", style: pw.TextStyle(font: ttf))
                    ]),
                  ],
                  if (allResources[i].c != null)
                    pw.Column(children: [
                      pw.Text(allResources[i].c!.price.toString(),
                          style: pw.TextStyle(font: ttf))
                    ]),
                  if (allResources[i].m != null)
                    pw.Column(children: [
                      pw.Text(allResources[i].m!.cost_per_quant.toString(),
                          style: pw.TextStyle(font: ttf))
                    ])
                ]),
              ]
            ]),
            pw.SizedBox(height: 20),
            pw.Text("Task/Resources:", style: pw.TextStyle(font: ttfBold)),
            pw.Table(border: pw.TableBorder.all(), children: [
              pw.TableRow(children: [
                pw.Column(children: [
                  pw.Text(" Task ID ", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text(" Name ", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text(" Duration ", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text(" Start(date) ", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text(" End(date) ", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("Resource name", style: pw.TextStyle(font: ttf))
                ]),
                pw.Column(children: [
                  pw.Text("Total Cost", style: pw.TextStyle(font: ttf))
                ])
              ]),
              for (int i = 0; i < allTasks.length; i++) ...[
                pw.TableRow(children: [
                  pw.Column(children: [
                    pw.Text(" ${i + 1} ", style: pw.TextStyle(font: ttf))
                  ]),
                  pw.Column(children: [
                    pw.Text(" ${allTasks[i].label} ",
                        style: pw.TextStyle(font: ttf))
                  ]),
                  pw.Column(children: [
                    pw.Text(
                        " ${calcDuration(DateTime.utc(allTasks[i].S_Date_year!, allTasks[i].S_Date_month!, allTasks[i].S_Date_day!), DateTime.utc(allTasks[i].F_Date_year!, allTasks[i].F_Date_month!, allTasks[i].F_Date_day!))} Days ",
                        style: pw.TextStyle(font: ttf))
                  ]),
                  pw.Column(children: [
                    pw.Text(
                        " ${allTasks[i].S_Date_year}-${allTasks[i].S_Date_month}-${allTasks[i].S_Date_day} ",
                        style: pw.TextStyle(font: ttf))
                  ]),
                  pw.Column(children: [
                    pw.Text(
                        " ${allTasks[i].F_Date_year}-${allTasks[i].F_Date_month}-${allTasks[i].F_Date_day} ",
                        style: pw.TextStyle(font: ttf))
                  ]),
                  pw.Column(children: [
                    for (int j = 0;
                        j < db.getResourcesFor(allTasks[i])!.length;
                        j++) ...[
                      if (db.getResourcesFor(allTasks[i])!.isNotEmpty)
                        pw.Text(
                            "${db.getResourcesFor(allTasks[i])![j].label}[x${countRep(db.getResourcesFor(allTasks[i])![j].id, allTasks[i].repeatedIds!)}]",
                            style: pw.TextStyle(font: ttf, fontSize: 7))
                      else
                        pw.Text("", style: pw.TextStyle(font: ttf))
                    ],
                  ]),
                  pw.Column(children: [
                    pw.Text(
                        db
                            .getResourceTotalForTask(allTasks[i].id)
                            .toStringAsFixed(2),
                        style: pw.TextStyle(font: ttf))
                  ]),
                ])
              ],
              pw.TableRow(children: [
                pw.Column(children: [
                  pw.Text("Project Total:",
                      style: pw.TextStyle(font: ttf, fontSize: 9))
                ]),
                pw.Column(
                    children: [pw.Text("", style: pw.TextStyle(font: ttf))]),
                pw.Column(
                    children: [pw.Text("", style: pw.TextStyle(font: ttf))]),
                pw.Column(
                    children: [pw.Text("", style: pw.TextStyle(font: ttf))]),
                pw.Column(
                    children: [pw.Text("", style: pw.TextStyle(font: ttf))]),
                pw.Column(
                    children: [pw.Text("", style: pw.TextStyle(font: ttf))]),
                pw.Column(children: [
                  pw.Text(projectTotal(allTasks).toStringAsFixed(2),
                      style: pw.TextStyle(font: ttf))
                ]),
              ])
            ])
          ];
        })));

    await Printing.sharePdf(
        bytes: await pdf.save(), filename: "PDFExample.pdf");
  }

  int calcDuration(DateTime start, DateTime end) {
    return DateTimeRange(start: start, end: end).duration.inDays;
  }

  int countRep(int res, List<int> repeatList) {
    int total = 0;
    for (int i = 0; i < repeatList.length; i++) {
      if (repeatList[i] == res) {
        total++;
      }
    }
    return total + 1;
  }

  double projectTotal(List<Task> t) {
    double total = 0;

    for (int i = 0; i < t.length; i++) {
      total += db.getResourceTotalForTask(t[i].id);
    }

    return total;
  }
}
